package com.example.greendaodemo.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.asus.syoucloud.bean.LyricItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LYRIC_ITEM".
*/
public class LyricItemDao extends AbstractDao<LyricItem, Long> {

    public static final String TABLENAME = "LYRIC_ITEM";

    /**
     * Properties of entity LyricItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property FromLyric = new Property(1, long.class, "fromLyric", false, "FROM_LYRIC");
        public final static Property Time = new Property(2, int.class, "time", false, "TIME");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property Translate = new Property(4, String.class, "translate", false, "TRANSLATE");
        public final static Property Offset = new Property(5, float.class, "offset", false, "OFFSET");
    }

    private Query<LyricItem> lyric_LyricItemsQuery;

    public LyricItemDao(DaoConfig config) {
        super(config);
    }
    
    public LyricItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LYRIC_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"FROM_LYRIC\" INTEGER NOT NULL ," + // 1: fromLyric
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"TEXT\" TEXT," + // 3: text
                "\"TRANSLATE\" TEXT," + // 4: translate
                "\"OFFSET\" REAL NOT NULL );"); // 5: offset
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LYRIC_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LyricItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getFromLyric());
        stmt.bindLong(3, entity.getTime());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String translate = entity.getTranslate();
        if (translate != null) {
            stmt.bindString(5, translate);
        }
        stmt.bindDouble(6, entity.getOffset());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LyricItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getFromLyric());
        stmt.bindLong(3, entity.getTime());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String translate = entity.getTranslate();
        if (translate != null) {
            stmt.bindString(5, translate);
        }
        stmt.bindDouble(6, entity.getOffset());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LyricItem readEntity(Cursor cursor, int offset) {
        LyricItem entity = new LyricItem( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // fromLyric
            cursor.getInt(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // text
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // translate
            cursor.getFloat(offset + 5) // offset
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LyricItem entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFromLyric(cursor.getLong(offset + 1));
        entity.setTime(cursor.getInt(offset + 2));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTranslate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOffset(cursor.getFloat(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LyricItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LyricItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LyricItem entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lyricItems" to-many relationship of Lyric. */
    public List<LyricItem> _queryLyric_LyricItems(long fromLyric) {
        synchronized (this) {
            if (lyric_LyricItemsQuery == null) {
                QueryBuilder<LyricItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FromLyric.eq(null));
                lyric_LyricItemsQuery = queryBuilder.build();
            }
        }
        Query<LyricItem> query = lyric_LyricItemsQuery.forCurrentThread();
        query.setParameter(0, fromLyric);
        return query.list();
    }

}
